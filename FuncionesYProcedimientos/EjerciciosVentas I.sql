/* EJERCICIOS DE VENTAS */

/* 1. CREAR UN PROCEDIMIENTO ALMACENADO PARA ACTUALIZAR EL PRECIO 
DE UN PRODUCTO QUE SE ENVÍE COMO PARÁMETRO DE ENTRADA */

CREATE OR REPLACE PROCEDURE ACTUALIZAR_PRECIO(CODIGO PRODUCTOS.COD_PRODUCTO%TYPE,
                                              PRECIO PRODUCTOS.PRECIO_UNITARIO%TYPE)
IS
BEGIN
    UPDATE PRODUCTOS
    SET PRECIO_UNITARIO = PRECIO
    WHERE COD_PRODUCTO = CODIGO;
    
    -- MANEJO DE EXCEPCIONES
    IF SQL%ROWCOUNT=0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'NO EXISTE ESE CODIGO DE PRODUCTO');
    ELSE
        DBMS_OUTPUT.PUT_LINE('PRECIO ACTUALIZADO');
    END IF;
    
END ACTUALIZAR_PRECIO;
/

-- ==== EJECUCIÓN DEL EJERCICIO ==== --
BEGIN
     ACTUALIZAR_PRECIO('P0010', 120);
END;
/


/* 2. CREAR UNA FUNCIÓN QUE DEVUELVA EL NOMBRE DEL PRODUCTO MÁS VENDIDO */

CREATE OR REPLACE FUNCTION PRODUCTO_MAS_VENDIDO
RETURN PRODUCTOS.DESCRIPCION%TYPE
IS
    -- CREO EL REGISTRO
    TYPE PRODUCTO_VENTAS IS RECORD (
        CODIGO DETALLE_FACTURAS.COD_PRODUCTO%TYPE,
        NOMBRE PRODUCTOS.DESCRIPCION%TYPE,
        CANTIDAD DETALLE_FACTURAS.CANTIDAD%TYPE
    );
    
    -- CREO LA TABLA A PARTIR DEL REGISTRO
    TYPE TABLA_PRODUCTO_VENTAS IS TABLE OF PRODUCTO_VENTAS INDEX BY BINARY_INTEGER;
    
    -- LISTA DONDE SE VA A GUARDAR EL SELECT CON ESTRUCTURA DE LA TABLA
    LISTA_PROD_VENTAS TABLA_PRODUCTO_VENTAS;
BEGIN
    -- ALMACENA CADA PRODUCTO CON SU CANTIDAD DE VENTAS EN LA LISTA
    SELECT D.COD_PRODUCTO, P.DESCRIPCION, SUM(D.CANTIDAD) AS CANTIDAD
    BULK COLLECT INTO LISTA_PROD_VENTAS
    FROM DETALLE_FACTURAS D
    INNER JOIN PRODUCTOS P ON D.COD_PRODUCTO=P.COD_PRODUCTO
    GROUP BY D.COD_PRODUCTO, P.DESCRIPCION
    ORDER BY CANTIDAD DESC;
    
    -- MANEJO DE EXCEPCIONES
    IF SQL%ROWCOUNT=0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'NO HAY PRODUCTOS EN LA TABLA');
    END IF;
    
    RETURN LISTA_PROD_VENTAS(1).NOMBRE;
END PRODUCTO_MAS_VENDIDO;
/

-- ==== EJECUCIÓN DEL EJERCICIO ==== --
BEGIN
    DBMS_OUTPUT.PUT_LINE('PRODUCTO MÁS VENDIDO: ' || PRODUCTO_MAS_VENDIDO);
END;
/


/* 3. ESCRIBIR UN PROCEDIMIENTO ALMACENADO QUE PERMITA ACTUALIZAR EL IMPORTE 
TOTAL DE UNA FACTURA, SEGÚN EL DETALLE QUE TENGA ASIGNADO. EL CÓDIGO DE FACTURA 
DEBE ENVIARSE COMO PARÁMETRO DE ENTRADA. */

CREATE OR REPLACE PROCEDURE ACT_IMPORTE_FACTURA(CODIGO FACTURAS.COD_FACTURA%TYPE)
IS
    IMPORTE FACTURAS.IMPORTE_TOTAL%TYPE;
BEGIN
    -- NUEVO IMPORTE
    SELECT SUM(SUBTOTAL)
    INTO IMPORTE
    FROM DETALLE_FACTURAS
    WHERE COD_FACTURA = CODIGO;
    
    UPDATE FACTURAS
    SET IMPORTE_TOTAL = IMPORTE
    WHERE CODIGO = COD_FACTURA;
    
    -- MANEJO DE EXCEPCIONES
    IF SQL%ROWCOUNT=0 THEN
        RAISE_APPLICATION_ERROR(-20001,'EL CODIGO DE FACTURA INTRODUCIDO NO CORRESPONDE CON NINGUNA FACTURA');
    ELSE
        DBMS_OUTPUT.PUT_LINE('IMPORTE TOTAL ACTUALIZADO');
    END IF;
    
END ACT_IMPORTE_FACTURA;
/

-- ==== EJECUCIÓN DEL EJERCICIO ==== --
BEGIN
    ACT_IMPORTE_FACTURA('F0010');
END;
/


/* 4. CREAR UN PROCEDIMIENTO QUE PERMITA INSERTAR INFORMACIÓN AL DETALLE DE 
UNA FACTURA. */

--CREATE OR REPLACE PROCEDURE INSERT_INFO_DETALLE
--IS


/* 5. DESARROLLAR UN PROCEDIMIENTO ALMACENADO QUE DEVUELVA UN REPORTE CON LA 
LISTA Y SUMATORIA TOTAL DE TODAS FACTURAS AGRUPADAS POR CLIENTE. */

CREATE OR REPLACE PROCEDURE FACTURAS_CLIENTE
IS
    -- CREO EL REGISTRO
    TYPE REG_FACTURAS IS RECORD (
        CODIGO FACTURAS.COD_CLIENTE%TYPE,
        SUMA FACTURAS.IMPORTE_TOTAL%TYPE
    );
    
    -- CREO LA TABLA EN BASE AL REGISTRO
    TYPE TABLA_FACTURAS IS TABLE OF REG_FACTURAS INDEX BY BINARY_INTEGER;
    
    -- CREO LA VARIABLE LISTA
    LISTA_FACTURAS TABLA_FACTURAS;

BEGIN

    SELECT COD_CLIENTE, SUM(IMPORTE_TOTAL) AS "SUMATORIA FACTURAS"
    BULK COLLECT INTO LISTA_FACTURAS
    FROM FACTURAS
    GROUP BY COD_CLIENTE
    ORDER BY COD_CLIENTE;
    
    FOR I IN LISTA_FACTURAS.FIRST .. LISTA_FACTURAS.LAST LOOP
        DBMS_OUTPUT.PUT_LINE('CLIENTE: ' || LISTA_FACTURAS(I).CODIGO || ' TOTAL: ' || LISTA_FACTURAS(I).SUMA);
    END LOOP;

END FACTURAS_CLIENTE;
/


-- ==== EJECUCIÓN DEL EJERCICIO ==== --
BEGIN
    FACTURAS_CLIENTE;
END;
/













